// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            String          @id @default(uuid())
  name          String
  userId        String
  billboard     Billboard[]     @relation("StoreToBillboard")
  billboardmini Billboardmini[] @relation("StoreToBillboardMini")
  billboardsale Billboardsale[] @relation("StoreToBillboardSale")
  categories    Category[]      @relation("StoreToCategory")
  sizes         Size[]          @relation("StoreToSize")
  colors        Color[]         @relation("StoreToColor")
  product       Product[]       @relation("StoreToProduct")
  orders        Order[]         @relation("StoreToOrder")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Billboard {
  id             String           @id @default(uuid())
  storeId        String
  store          Store            @relation("StoreToBillboard", fields: [storeId], references: [id])
  label          String
  imagebillboard ImageBillboard[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([storeId])
}

model ImageBillboard {
  id String @id @default(uuid())

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)

  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([billboardId])
}

model Billboardmini {
  id                 String               @id @default(uuid())
  storeId            String
  store              Store                @relation("StoreToBillboardMini", fields: [storeId], references: [id])
  label              String
  imagebillboardmini ImageBillboardmini[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([storeId])
}

model ImageBillboardmini {
  id String @id @default(uuid())

  billboardminiId String
  billboardmini   Billboardmini @relation(fields: [billboardminiId], references: [id], onDelete: Cascade)

  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([billboardminiId])
}

model Billboardsale {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToBillboardSale", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}


model Category {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  categoryType     CategoryType  
  product   Product[] @relation("CategoryProduct")
  name      String       
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Size {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  product   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  product   Product[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model Imagesalientfeatures {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
enum CategoryType {
  CATEGORY
  CATEGORY1
  CATEGORY2
  CATEGORY3
  CATEGORY4
  CATEGORY5
  CATEGORY6
  CATEGORY7
  CATEGORY8
  CATEGORY9
  CATEGORY10
  CATEGORY11
}

enum ProductType {
  PRODUCT
  PRODUCT1
  PRODUCT2
  PRODUCT3
  PRODUCT4
  PRODUCT5
  PRODUCT6
  PRODUCT7
  PRODUCT8
  PRODUCT9
  PRODUCT10
  PRODUCT11
}

model Product {
  id               String                 @id @default(uuid())
  storeId          String
  store            Store                  @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId       String
  category         Category               @relation("CategoryProduct", fields: [categoryId], references: [id])
  productType      ProductType            // Add this field to distinguish product type (Product1 or Product2)
  name             String                 @unique
  heading          String                 
  description      String                 @db.Text
  // Khuyến mãi
  promotionheading String                 @db.Text
  promotiondescription String              @db.Text
  //Bảo hành
  guaranteeheading Decimal
  guaranteedescription Decimal
  guaranteeinfomation Decimal
  guaranteeprice   Decimal
  //Giá sản phẩm main
  price            Decimal
  percentpromotion Decimal
  isFeatured       Boolean                @default(false)
  isArchived       Boolean                @default(false)
  sizeId           String
  size             Size                   @relation(fields: [sizeId], references: [id])
  colorId          String
  color            Color                  @relation(fields: [colorId], references: [id])
  images           Image[]
  // Specification
  descriptionspecifications String       @db.Text
  valuespecifications       String       @db.Text
  description2specifications String       @db.Text
  value2specifications      String       @db.Text
  description3specifications String       @db.Text
  value3specifications      String       @db.Text
  description4specifications String       @db.Text
  value4specifications      String       @db.Text
  description5specifications String       @db.Text
  value5specifications      String       @db.Text
  description6specifications String       @db.Text
  value6specifications      String       @db.Text
  description7specifications String       @db.Text
  value7specifications      String       @db.Text
  description8specifications String       @db.Text
  value8specifications      String       @db.Text
  description9specifications String       @db.Text
  value9specifications      String       @db.Text
  description10specifications String     @db.Text
  value10specifications       String     @db.Text
  description11specifications String     @db.Text
  value11specifications       String     @db.Text
  description12specifications String     @db.Text
  value12specifications       String     @db.Text
  description13specifications String     @db.Text
  value13specifications       String     @db.Text
  description14specifications String     @db.Text
  value14specifications       String     @db.Text
  // salientfeatures
  descriptionsalientfeatures String      @db.Text
  description2salientfeatures String     @db.Text
  description3salientfeatures String     @db.Text
  description4salientfeatures String     @db.Text
  contentsalientfeatures      String     @db.Text
  imagesalientfeatures        Imagesalientfeatures[]
  orderItems                  OrderItem[]
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime   @updatedAt
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItem OrderItem[]
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  quantity  String     
  pricesales  Int
  warranty    Int
  priceold    Int
  product   Product @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}