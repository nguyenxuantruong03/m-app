// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id             String           @id @default(cuid())
  name           String
  userId         String
  billboard      Billboard[]      @relation("StoreToBillboard")
  categories     Category[]       @relation("StoreToCategory")
  sizes          Size[]           @relation("StoreToSize")
  colors         Color[]          @relation("StoreToColor")
  product        Product[]        @relation("StoreToProduct")
  orders         Order[]          @relation("StoreToOrder")
  coupon         Coupon[]         @relation("StoreToCoupon")
  taxrate        TaxRate[]        @relation("StoreToTaxRate")
  shippingrates  ShippingRates[]  @relation("StoreToShippingRates")
  productdetail  ProductDetail[]  @relation("StoreToDetailProductDetail")
  eventcalendar  EventCalendar[]  @relation("StoreToEventCalendar")
  sentEmailUser  SentEmailUser[]  @relation("StoreToSentEmailUser")
  caculateSalary CaculateSalary[] @relation("StoreCaculateSalary")
  wheelspin      WheelSpin[]      @relation("StoreToWheelSpin")
  system         System[]         @relation("StoreToSystem")
  favorite       Favorite[]       @relation("StoreToFavorite")
  feedBack       FeedBack[]       @relation("StoreToFeedBack")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Billboard {
  id             String           @id @default(cuid())
  storeId        String
  store          Store            @relation("StoreToBillboard", fields: [storeId], references: [id])
  label          String
  description    String
  imagebillboard ImageBillboard[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([storeId])
}

model ImageBillboard {
  id String @id @default(cuid())

  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  label       String?
  description String?
  url         String
  link        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
}

model Favorite {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation("StoreToFavorite", fields: [storeId], references: [id])
  name      String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id            String          @id @default(cuid())
  storeId       String
  store         Store           @relation("StoreToCategory", fields: [storeId], references: [id])
  categoryType  CategoryType
  ProductDetail ProductDetail[] @relation("CategoryProductDetail")
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([storeId])
}

model Size {
  id             String          @id @default(cuid())
  storeId        String
  store          Store           @relation("StoreToSize", fields: [storeId], references: [id])
  name           String
  value          String
  ProductDetail1 ProductDetail[] @relation("SizeProductDetail1")
  ProductDetail2 ProductDetail[] @relation("SizeProductDetail2")
  ProductDetail3 ProductDetail[] @relation("SizeProductDetail3")
  ProductDetail4 ProductDetail[] @relation("SizeProductDetail4")
  ProductDetail5 ProductDetail[] @relation("SizeProductDetail5")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([storeId])
}

model Color {
  id             String          @id @default(cuid())
  storeId        String
  store          Store           @relation("StoreToColor", fields: [storeId], references: [id])
  name           String
  value          String
  ProductDetail1 ProductDetail[] @relation("ColorProductDetail1")
  ProductDetail2 ProductDetail[] @relation("ColorProductDetail2")
  ProductDetail3 ProductDetail[] @relation("ColorProductDetail3")
  ProductDetail4 ProductDetail[] @relation("ColorProductDetail4")
  ProductDetail5 ProductDetail[] @relation("ColorProductDetail5")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([storeId])
}

enum CategoryType {
  CATEGORY
  CATEGORY1
  CATEGORY2
  CATEGORY3
  CATEGORY4
  CATEGORY5
  CATEGORY6
  CATEGORY7
  CATEGORY8
  CATEGORY9
  CATEGORY10
  CATEGORY11
}

enum ProductType {
  PRODUCT
  PRODUCT1
  PRODUCT2
  PRODUCT3
  PRODUCT4
  PRODUCT5
  PRODUCT6
  PRODUCT7
  PRODUCT8
  PRODUCT9
  PRODUCT10
  PRODUCT11
}

model ProductDetail {
  id                   String    @id @default(cuid())
  storeId              String
  store                Store     @relation("StoreToDetailProductDetail", fields: [storeId], references: [id])
  product              Product[] @relation("ProductDetailToProduct")
  title                String
  name1                String
  name2                String?
  name3                String?
  name4                String?
  name5                String?
  price1               Decimal
  price2               Decimal?
  price3               Decimal?
  price4               Decimal?
  price5               Decimal?
  percentpromotion1    Decimal
  percentpromotion2    Decimal?
  percentpromotion3    Decimal?
  percentpromotion4    Decimal?
  percentpromotion5    Decimal?
  quantity1            Int
  quantity2            Int?
  quantity3            Int?
  quantity4            Int?
  quantity5            Int?
  // Khuyến mãi
  promotionheading     String    @db.Text
  promotiondescription String    @db.Text
  //Bảo hành
  warranty1            Decimal?
  warranty2            Decimal?
  warranty3            Decimal?
  warranty4            Decimal?

  // Tính năng nổi bật
  descriptionsalientfeatures  String @db.Text
  description2salientfeatures String @db.Text
  description3salientfeatures String @db.Text
  description4salientfeatures String @db.Text
  contentsalientfeatures      String @db.Text

  //Chi tiết sản phẩm
  descriptionspecifications   String   @db.Text
  valuespecifications         String   @db.Text
  description2specifications  String?  @db.Text
  value2specifications        String?  @db.Text
  description3specifications  String?  @db.Text
  value3specifications        String?  @db.Text
  description4specifications  String?  @db.Text
  value4specifications        String?  @db.Text
  description5specifications  String?  @db.Text
  value5specifications        String?  @db.Text
  description6specifications  String?  @db.Text
  value6specifications        String?  @db.Text
  description7specifications  String?  @db.Text
  value7specifications        String?  @db.Text
  description8specifications  String?  @db.Text
  value8specifications        String?  @db.Text
  description9specifications  String?  @db.Text
  value9specifications        String?  @db.Text
  description10specifications String?  @db.Text
  value10specifications       String?  @db.Text
  description11specifications String?  @db.Text
  value11specifications       String?  @db.Text
  description12specifications String?  @db.Text
  value12specifications       String?  @db.Text
  description13specifications String?  @db.Text
  value13specifications       String?  @db.Text
  description14specifications String?  @db.Text
  value14specifications       String?  @db.Text
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  categoryId String
  category   Category @relation("CategoryProductDetail", fields: [categoryId], references: [id])
  size1Id    String
  size1      Size     @relation("SizeProductDetail1", fields: [size1Id], references: [id])
  size2Id    String?
  size2      Size?    @relation("SizeProductDetail2", fields: [size2Id], references: [id])
  size3Id    String?
  size3      Size?    @relation("SizeProductDetail3", fields: [size3Id], references: [id])
  size4Id    String?
  size4      Size?    @relation("SizeProductDetail4", fields: [size4Id], references: [id])
  size5Id    String?
  size5      Size?    @relation("SizeProductDetail5", fields: [size5Id], references: [id])
  color1Id   String
  color1     Color    @relation("ColorProductDetail1", fields: [color1Id], references: [id])
  color2Id   String?
  color2     Color?   @relation("ColorProductDetail2", fields: [color2Id], references: [id])
  color3Id   String?
  color3     Color?   @relation("ColorProductDetail3", fields: [color3Id], references: [id])
  color4Id   String?
  color4     Color?   @relation("ColorProductDetail4", fields: [color4Id], references: [id])
  color5Id   String?
  color5     Color?   @relation("ColorProductDetail5", fields: [color5Id], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([size1Id])
  @@index([size2Id])
  @@index([size3Id])
  @@index([size4Id])
  @@index([size5Id])
  @@index([color1Id])
  @@index([color2Id])
  @@index([color3Id])
  @@index([color4Id])
  @@index([color5Id])
}

model Imagesalientfeatures {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Product {
  id      String @id @default(cuid())
  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  productType          ProductType // Add this field to distinguish product type (Product1 or Product2)
  name                 String                 @unique
  heading              String
  description          String                 @db.Text
  isFeatured           Boolean                @default(false)
  isArchived           Boolean                @default(false)
  sold                 Int?                   @default(0)
  images               Image[]
  imagesalientfeatures Imagesalientfeatures[]
  orderItems           OrderItem[]
  comment              Comment[]
  responsecomment      ResponseComment[]
  emoji                Emoji[]
  cartItem             CartItem[]
  favoriteProduct      FavoriteProduct[]
  review               Review[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  productdetailId      String
  productdetail        ProductDetail          @relation("ProductDetailToProduct", fields: [productdetailId], references: [id])

  isProductShowLive Boolean @default(false)
  isProductLivePin  Boolean @default(false)

  timeSaleStart DateTime?
  timeSaleEnd   DateTime?
  isSale        Boolean   @default(false)

  @@index([storeId])
  @@index([productdetailId])
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  size      String
  color     String
  quantity  Int
  warranty  String?

  @@index([userId])
  @@index([productId])
}

enum StatusOrder {
  Cho_xac_nhan
  Soan_hang
  Cho_lay_hang
  Dang_giao
  Giao_lai_hang
  Danh_gia
  Hoan_thanh
  Da_giao
  Da_huy
  Tra_hang
  Shipper_chuan_bi
  Shipper_dang_den
  Da_nhan_tra_hang
  Nhan_tai_cua_hang
  Soan_hang_nhan_tai_cua_hang
  Da_soan_hang_xong
  Da_nhan_tai_cua_hang
}

model Order {
  id                       String               @id @default(cuid())
  storeId                  String
  store                    Store                @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItem                OrderItem[]
  isPaid                   Boolean              @default(false)
  receiveCash              Boolean              @default(false)
  phone                    String               @default("")
  address                  String               @default("")
  addressOther             String?              @default("")
  name                     String?              @default("")
  note                     String?              @default("")
  gender                   String?              @default("")
  deliveryMethod           String               @default("")
  email                    String               @default("")
  userId                   String?              @default("")
  user                     User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                   StatusOrder          @default(Cho_xac_nhan)
  statusOther              String?              @default("")
  userIdStaff              String?              @default("")
  userIdShipper            String?              @default("")
  userIdRecieveDebt        String?              @default("")
  debtShipper              Boolean              @default(false)
  imagereturnProduct       ImageReturnProduct[]
  imageCustomer            CustomerImage[]
  destiontionReturnProduct String?
  returnProduct            Boolean?
  locationLatEnd Float?   // Vị trí khi giao hàng người dùng lần cuối
  locationLngEnd Float?   // Vị trí khi giao hàng người dùng lần cuối

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([storeId])
}

model CustomerImage {
  id String @id @default(cuid())

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model ImageReturnProduct {
  id String @id @default(cuid())

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  isGift     Boolean  @default(false)
  size       String
  color      String
  quantity   String
  pricesales Int
  warranty   Int
  priceold   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model FavoriteProduct {
  id            String   @id
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  productName   String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  selectedSize  String
  selectedColor String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

enum Duration {
  forever
  once
  repeating
}

model Coupon {
  id             String        @id @default(cuid())
  storeId        String
  store          Store         @relation("StoreToCoupon", fields: [storeId], references: [id])
  name           String?
  description    String?
  duration       Duration?
  durationinmoth Int?
  percent        Int?
  imagecoupon    ImageCoupon[]
  maxredemptions Int?
  redeemby       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([storeId])
}

model ImageCoupon {
  id String @id @default(cuid())

  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

enum TaxType {
  vat
  sales_tax
}

model TaxRate {
  id          String   @id @default(cuid())
  storeId     String
  store       Store    @relation("StoreToTaxRate", fields: [storeId], references: [id])
  name        String
  description String
  percentage  Int
  inclusive   Boolean
  active      Boolean
  taxtype     TaxType?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

enum TaxBehavior {
  exclusive
  inclusive
  unspecified
}

enum Unit {
  hour
  day
  business_day
  week
  month
}

enum ShippingTaxcode {
  txcd_00000000
  txcd_92010001
}

model ShippingRates {
  id          String           @id @default(cuid())
  storeId     String
  store       Store            @relation("StoreToShippingRates", fields: [storeId], references: [id])
  name        String
  taxcode     ShippingTaxcode?
  taxbehavior TaxBehavior
  amount      Int
  unitmin     Unit
  valuemin    Int
  unitmax     Unit
  valuemax    Int
  active      Boolean?         @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([storeId])
}

enum UserRole {
  ADMIN
  USER
  STAFF
  SHIPPER
  GUEST
  MARKETING
}

enum Gender {
  None
  Male
  Female
}

//Bằng cấp
enum Degree {
  None
  //Tiểu học
  Elementary
  //Trung học
  JuniorHighSchool
  //Trung học phổ thông
  HighSchool
  //Cao đẳng
  JuniorColleges
  //Đại học
  University
  //Thạc sĩ
  MastersDegree
}

enum MaritalStatus {
  None
  //Cô đơn
  Single
  // Kết hôn
  Married
  // Ly hôn
  Separated
  // Tái hôn
  Remarried
}

enum WorkingTime {
  None
  Parttime4h
  Parttime8h
  Fulltime
  //Thời vụ
  SeasonalJob
}

model User {
  id              String            @id @default(cuid())
  name            String?
  nameuser        String?           @unique
  favorite        String[]
  bio             String?
  email           String?           @unique
  address         String?
  addressother    String?
  emailVerified   DateTime?
  image           String?
  imageCredential ImageCredential[]

  frameAvatar              String?
  password                 Password[]
  lastlogin                DateTime?
  //Ban user
  ban                      Boolean?
  banExpires               DateTime?
  isbanforever             Boolean?       @default(false)
  timebanforever           DateTime?
  //Làm mới lại số lần gửi mã xác thực 2FA
  resendCount              Int?           @default(0)
  //resetresendToken xem người dùng đã gửi lại bao nhiêu lần 
  resendTokenVerify        Int?           @default(0)
  //resendResetPassword xem người dùng đã gửi lại bao nhiêu lần 
  resendTokenResetPassword Int?           @default(0)
  //resendEmailResetPassword xem người dùng đã gửi lại bao nhiêu lần 
  resendEmailResetPassword Int?           @default(0)
  //Chỉ gửi mail 2 lần cho người dùng
  resendBanUserNotStart    Int?           @default(0)
  //Chỉ gửi mail 2 lần cho người dùng
  resendUnBanUser          Int?           @default(0)
  // Xác thực 2 yếu tố
  isTwoFactorEnabled       Boolean        @default(false)
  //------------------------Nhân viên------------------------------
  //Xác thực User có câp nhật chứng minh nhân dân chưa 
  isCitizen                Boolean?       @default(false)
  //Sô chúng minh nhân dân 
  numberCCCD               String?
  //Ngày cấp CMND
  dateRange                DateTime?
  //Cấp ở đầu
  issued                   String?
  gender                   Gender?        @default(None)
  //Bằng cấp
  degree                   Degree?        @default(None)
  //Tình trạng hôn nhân 
  maritalStatus            MaritalStatus? @default(None)
  // Số điện thoại
  phonenumber              String?
  //Thời gian làm việc 
  workingTime              WorkingTime?   @default(None)
  //Ngày sinh
  dateofbirth              DateTime?
  //Thời gian bắt đầu làm việc
  timestartwork            String?
  //Veiryfi email đã gửi chưa
  sentVeirifi              Boolean?       @default(false)
  //url đi làm của nhân viên
  urlimageCheckAttendance  String?
  //Mã nfc của nhân viên
  codeNFC                  String?
  //language               
  language                 String        @default("vi")
  //--------------Các thứ làm việc của  nhân viên------------------
  daywork                  String[]
  //Location
  locationLat Float?   // Vị trí khi người dùng tắt chia sẻ
  locationLng Float?   // Vị trí khi người dùng tắt chia sẻ
  isSharingLocation Boolean @default(false)
  //Hiển thị Quảng cáo
  isShowAds        Boolean @default(false)
  TimeshowAds      DateTime @default(now())

  //Stream
  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking Block[] @relation("Blocking")
  blocked  Block[] @relation("Blocked")

  stream                Stream?
  //----------------Other-------------------
  role                  UserRole               @default(USER)
  accounts              Account[]
  eventcalendar         EventCalendar[]
  sentEmailUser         SentEmailUser[]
  twoFactorConfirmation TwoFactorConfirmation?
  socialLink            SocialLink?
  CaculateSalary        CaculateSalary[]
  Comment               Comment[]
  ResponseComment       ResponseComment[]
  WheelSpin             WheelSpin[]
  deviceInfo            DeviceInfo[]
  emoji                 Emoji[]
  cartItem              CartItem[]
  order                 Order[]
  favoritePoroduct      FavoriteProduct[]
  review                Review[]
  leaderboard           Leaderboard[]
  feedback              FeedBack[]
  showInfomation        ShowInfomation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Stream {
  id           String  @id @default(cuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  timeDelay           Int     @default(3000)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("FollowedBy", fields: [followingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(cuid())
  blockerId String
  blockedId String

  blocker User @relation("Blocking", fields: [blockerId], references: [id])
  blocked User @relation("Blocked", fields: [blockedId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model ShowInfomation {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isEmail       Boolean @default(false)
  isGender      Boolean @default(false)
  isPhone       Boolean @default(false)
  isDateofBirth Boolean @default(false)
  isAddress     Boolean @default(false)
  isAdressOther Boolean @default(false)
  isFavorite    Boolean @default(false)
  isSocial      Boolean @default(false)
  isCreatedAt   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model Password {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ImageCredential {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model SocialLink {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkyoutube   String?
  linkfacebook  String?
  linkinstagram String?
  linktwitter   String?
  linklinkedin  String?
  linkgithub    String?
  linktiktok    String?
  linkwebsite   String?
  linkother     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

model EventCalendar {
  id                     String           @id @default(cuid())
  storeId                String
  store                  Store            @relation("StoreToEventCalendar", fields: [storeId], references: [id])
  userId                 String
  user                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  CaculateSalary         CaculateSalary[]
  attendancestart        String?
  attendanceend          String?
  title                  String?
  start                  DateTime?
  end                    DateTime?
  allDay                 Boolean?
  //Thời gian đi trễ của nhân viên
  delayTime              String?
  //isEnd dùng để kiểm tra nhân viên đã kết thúc công việc chưa nếu kết thúc disable btn kết thúc
  isEnd                  Boolean?
  // Lưu ảnh khi chụp lại
  urlImageAttendance     String?
  //lấy ảnh chuyển thành qr khi check se chuyen thanh secret
  qrcodeCheckAttendance  String?
  //Thời gian cập nhật của ảnh của nhân viên
  updateImage            DateTime?
  //Chuyển thành true để không được up image đc nữa
  isCheckAttendanceImage Boolean          @default(false)
  //Cập nhật mã NFC
  codeNFC                String?
  //Thời gian cập nhật NFC
  updateNFC              DateTime?
  isCheckNFC             Boolean?         @default(false)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  @@index([storeId])
  @@index([userId])
}

model DeviceInfo {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  browser     String[]
  cpu         String[]
  device      String[]
  engine      String[]
  os          String[]
  fullModel   String?
  ua          String?
  limitDevice Int?     @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model SentEmailUser {
  id            String   @id @default(cuid())
  storeId       String
  store         Store    @relation("StoreToSentEmailUser", fields: [storeId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject       String
  description   String
  sentemailuser String[]
  isSent        Boolean? @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([storeId])
  @@index([userId])
}

model CaculateSalary {
  id              String         @id @default(cuid())
  storeId         String
  store           Store          @relation("StoreCaculateSalary", fields: [storeId], references: [id])
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventcalendarId String?
  eventcalendar   EventCalendar? @relation(fields: [eventcalendarId], references: [id], onDelete: Cascade)
  bonus           Int?
  isSent          Boolean?       @default(false)
  isPaid          Boolean?       @default(false)
  salaryday       Decimal?
  salarytotal     Decimal?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([eventcalendarId])
  @@index([userId])
  @@index([storeId])
}

model Comment {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating          Int
  comment         String
  responsecomment ResponseComment[]
  emoji           Emoji[]
  changeReview    Boolean?
  totalchange     Int?              @default(0)
  productId       String
  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([productId])
  @@index([userId])
}

model ResponseComment {
  id           String   @id @default(cuid())
  commentId    String
  comment      Comment  @relation(fields: [commentId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  description  String
  changeReview Boolean?
  totalchange  Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([commentId])
  @@index([productId])
  @@index([userId])
}

model Emoji {
  id               String   @id @default(cuid())
  commentId        String?
  comment          Comment? @relation(fields: [commentId], references: [id])
  reviewId         String?
  review           Review?  @relation(fields: [reviewId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId        String
  product          Product  @relation(fields: [productId], references: [id])
  emoji            String
  emojilengthLove  Int      @default(0)
  emojilengthHaha  Int      @default(0)
  emojilengthWow   Int      @default(0)
  emojilengthAngry Int      @default(0)
  emojilengthLike  Int      @default(0)
  emojilengthSad   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([reviewId])
  @@index([commentId])
  @@index([productId])
  @@index([userId])
}

model WheelSpin {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation("StoreToWheelSpin", fields: [storeId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coin      Int      @default(0)
  rotation  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([userId])
}

model System {
  id        String   @id @default(cuid())
  storeId   String?
  store     Store?   @relation("StoreToSystem", fields: [storeId], references: [id])
  newChange String[]
  oldChange String[]
  delete    String[]
  type      String?
  user      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Review {
  id String @id @default(cuid())

  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageReview  ImageReview[]
  emoji        Emoji[]
  isPublic     String
  content      String
  rating       Int
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  categoryName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model ImageReview {
  id       String @id @default(cuid())
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
}

model Leaderboard {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  score  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model FeedBack {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId String?
  store   Store?  @relation("StoreToFeedBack", fields: [storeId], references: [id])

  emotion          Int
  category         Int
  content          String   
  timeNextResponse DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([storeId])
}
